{'TMP': 'C:\\Users\\Joey\\AppData\\Local\\Temp', 'COMPUTERNAME': 'DESKTOP-QRPOQ77', 'USERDOMAIN': 'DESKTOP-QRPOQ77', 'GOOGLE_API_KEY': 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q', 'PSMODULEPATH': 'C:\\Users\\Joey\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 61 Stepping 4, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3d04', 'VSCODE_SHARED_IPC_HOOK': '\\\\.\\pipe\\code-f73ba8-1.10.2-shared-sock', 'VSCODE_NODE_CACHED_DATA_DIR_10016': 'C:\\Users\\Joey\\AppData\\Roaming\\Code\\CachedData', 'VSCODE_IPC_HOOK': '\\\\.\\pipe\\code-f73ba8-1.10.2-main-sock', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'LANG': 'en_US.UTF-8', 'TEMP': 'C:\\Users\\Joey\\AppData\\Local\\Temp', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'VSCODE_CWD': 'C:\\Users\\Joey\\Desktop', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\Joey\\AppData\\Local', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEPATH': '\\Users\\Joey', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-QRPOQ77', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Joey', 'LOGONSERVER': '\\\\DESKTOP-QRPOQ77', 'SYSTEMROOT': 'C:\\Windows', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'ONEDRIVE': 'C:\\Users\\Joey\\OneDrive', 'PATH': 'C:\\Program Files (x86)\\Python3\\Scripts\\;C:\\Program Files (x86)\\Python3\\;C:\\Program Fils\\Python27\\;C:\\Program Fils\\Python27\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\OpenVPN\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\Joey\\AppData\\Local\\Microsoft\\WindowsApps;;C:\\Program Files (x86)\\Microsoft VS Code\\bin', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.CPL', 'WINDIR': 'C:\\Windows', 'VSCODE_PID': '10016', 'APPDATA': 'C:\\Users\\Joey\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', 'PROCESSOR_LEVEL': '6', 'VSCODE_NLS_CONFIG': '{"locale":"zh-cn","availableLanguages":{"*":"zh-cn"}}', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\Joey'}